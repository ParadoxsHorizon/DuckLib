#ifndef ___DUCKED_C_ENDIAN_HPP___
#define ___DUCKED_C_ENDIAN_HPP___

#include <boost/predef.h>
#include <span>
#include <cstdint>
#include <climits>
#include <bit>

// https://stackoverflow.com/questions/105252/how-do-i-convert-between-big-endian-and-little-endian-values-in-c
namespace std {
	template <typename T>
	constexpr T swap_endian(T u) noexcept {
		static_assert (CHAR_BIT == 8, "CHAR_BIT != 8");

		union {
			T u;
			unsigned char u8[sizeof(T)];
		} source, dest;

		source.u = u;

		for (size_t k = 0; k < sizeof(T); k++)
			dest.u8[k] = source.u8[sizeof(T) - k - 1];

		return dest.u;
	}

	constexpr inline uint8_t swap_endian(uint8_t in) noexcept { return in; }

	constexpr inline uint16_t swap_endian(uint16_t in) noexcept {
#if COMP_GNUC || COMP_CLANG
		return __builtin_bswap16(in);
#elif COMP_MSVC
		return _byteswap_ushort(in);
#else
		return ((((in) >> 8) & 0xff) | (((in) & 0xff) << 8));
#endif
	}

	constexpr inline uint32_t swap_endian(uint32_t in) noexcept {
#if COMP_GNUC || COMP_CLANG
		return __builtin_bswap32(in);
#elif COMP_MSVC
		return _byteswap_ulong(in);
#else
		return ((((in) & 0xff000000) >> 24) |
				(((in) & 0x00ff0000) >>  8) |
				(((in) & 0x0000ff00) <<  8) |
				(((in) & 0x000000ff) << 24));
#endif
	}

	constexpr inline uint64_t swap_endian(uint64_t in) noexcept {
#if COMP_GNUC || COMP_CLANG
		return __builtin_bswap64(in);
#elif COMP_MSVC
		return _byteswap_uint64(in);
#else
		return ((((in) & 0xff00000000000000ull) >> 56) |
				(((in) & 0x00ff000000000000ull) >> 40) |
				(((in) & 0x0000ff0000000000ull) >> 24) |
				(((in) & 0x000000ff00000000ull) >>  8) |
				(((in) & 0x00000000ff000000ull) <<  8) |
				(((in) & 0x0000000000ff0000ull) << 24) |
				(((in) & 0x000000000000ff00ull) << 40) |
				(((in) & 0x00000000000000ffull) << 56));
#endif
	}

	template<size_t N> constexpr inline std::span<std::byte, N> swap_endian(std::span<std::byte, N> bytes) noexcept {
		// TODO: Is this algorithm (simple reversing) correct?
		std::reverse(bytes.begin(), bytes.end());
		return bytes;
	}
	template<size_t N> constexpr inline std::span<const std::byte, N> swap_endian(std::span<const std::byte, N> _bytes) noexcept {
		std::span<std::byte, N>* bytes = (std::span<std::byte, N>*)(&_bytes);
		return swap_endian(*bytes);
	}

	constexpr inline uint8_t bswap(uint8_t in) noexcept { return swap_endian(in); }
	constexpr inline uint16_t bswap(uint16_t in) noexcept { return swap_endian(in); }
	constexpr inline uint32_t bswap(uint32_t in) noexcept { return swap_endian(in); }
	constexpr inline uint64_t bswap(uint64_t in) noexcept { return swap_endian(in); }

	constexpr inline uint8_t convert_endian(uint8_t in, std::endian target, std::endian source = std::endian::native) noexcept {
		if(target == source) return in;
		return swap_endian(in);
	}
	constexpr inline uint16_t convert_endian(uint16_t in, std::endian target, std::endian source = std::endian::native) noexcept {
		if(target == source) return in;
		return swap_endian(in);
	}
	constexpr inline uint32_t convert_endian(uint32_t in, std::endian target, std::endian source = std::endian::native) noexcept {
		if(target == source) return in;
		return swap_endian(in);
	}
	constexpr inline uint64_t convert_endian(uint64_t in, std::endian target, std::endian source = std::endian::native) noexcept {
		if(target == source) return in;
		return swap_endian(in);
	}
	template<size_t N>
	constexpr inline std::span<std::byte, N> convert_endian(std::span<std::byte, N> in, std::endian target, std::endian source = std::endian::native) noexcept {
		if(target == source) return in;
		return swap_endian(in);
	}
	template<size_t N>
	constexpr inline std::span<const std::byte, N> convert_endian(std::span<const std::byte, N> in, std::endian target, std::endian source = std::endian::native) noexcept {
		if(target == source) return in;
		return swap_endian(in);
	}

	constexpr inline uint8_t convert_little_endian(uint8_t in) noexcept { return convert_endian(in, std::endian::little); } // Converts native endian to little endian or little endian to native endian
	constexpr inline uint8_t convert_big_endian(uint8_t in) noexcept { return convert_endian(in, std::endian::big); } // Converts native endian to big endian or big endian to native endian
	constexpr inline uint16_t convert_little_endian(uint16_t in) noexcept { return convert_endian(in, std::endian::little); } // Converts native endian to little endian or little endian to native endian
	constexpr inline uint16_t convert_big_endian(uint16_t in) noexcept { return convert_endian(in, std::endian::big); } // Converts native endian to big endian or big endian to native endian
	constexpr inline uint32_t convert_little_endian(uint32_t in) noexcept { return convert_endian(in, std::endian::little); } // Converts native endian to little endian or little endian to native endian
	constexpr inline uint32_t convert_big_endian(uint32_t in) noexcept { return convert_endian(in, std::endian::big); } // Converts native endian to big endian or big endian to native endian
	constexpr inline uint64_t convert_little_endian(uint64_t in) noexcept { return convert_endian(in, std::endian::little); } // Converts native endian to little endian or little endian to native endian
	constexpr inline uint64_t convert_big_endian(uint64_t in) noexcept { return convert_endian(in, std::endian::big); } // Converts native endian to big endian or big endian to native endian
	template<size_t N> constexpr inline std::span<std::byte, N> convert_big_endian(std::span<std::byte, N> in) noexcept { return convert_endian(in, std::endian::big); } // Converts native endian to big endian or big endian to native endian
	template<size_t N> constexpr inline std::span<std::byte, N> convert_little_endian(std::span<std::byte, N> in) noexcept { return convert_endian(in, std::endian::little); } // Converts native endian to little endian or little endian to native endian
	template<size_t N> constexpr inline std::span<const std::byte, N> convert_big_endian(std::span<const std::byte, N> in) noexcept { return convert_endian(in, std::endian::big); } // Converts native endian to big endian or big endian to native endian
	template<size_t N> constexpr inline std::span<const std::byte, N> convert_little_endian(std::span<const std::byte, N> in) noexcept { return convert_endian(in, std::endian::little); } // Converts native endian to little endian or little endian to native endian
}

#endif //___DUCKED_C_ENDIAN_HPP___
