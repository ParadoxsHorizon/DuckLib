#ifndef ___DUCKED_C_TESTING_HPP___
#define ___DUCKED_C_TESTING_HPP___
#include <doctest.h>	// Include doctest
#include <nanobench.h>	// Include nanobench
#include <string>

namespace dl {

	// String used to set the category of each benchmark
	extern std::string benchmarkTitle;

	template<std::invocable F>
	void benchmark(const std::string_view name, F f) {
		ankerl::nanobench::Bench().title(benchmarkTitle).run(name.data(), f);
	}

	#ifndef BENCHMARK
	struct ___ducked_c_benchmark_dummy___ {
		const std::string_view name;
	};
	template <std::invocable F> void operator<<(___ducked_c_benchmark_dummy___ d, F f) { benchmark(d.name, f); }
	#define BENCHMARK(name) ::dl::___ducked_c_benchmark_dummy___{name} << [&]()
	#endif // defer

} // dl

namespace std {
	inline namespace benchmark {
		template<typename... Ts> void do_not_optimize(Ts&&... args) {
			auto repeater = [](auto& v) { ankerl::nanobench::doNotOptimizeAway(v); return true; };
			(repeater(args) && ...);
		}
		using namespace ankerl::nanobench;
	} // std::benchmark

	inline namespace test {
		using namespace doctest;
	} // std::test

	inline void benchmark_header() { dl::benchmarkTitle = "benchmark"; }
	inline void benchmark_header(const std::string title) { dl::benchmarkTitle = title; }
} // std

// #define _BENCHMARK(name, lambda)

#endif // ___DUCKED_C_TESTING_HPP___

#if defined(TESTING_DEFINE_MAIN) && !defined(TESTING_MAIN_IS_DEFINED)
#define TESTING_MAIN_IS_DEFINED
DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4007) // 'function' : must be 'attribute' - see issue #182
int main(int argc, char** argv) { return doctest::Context(argc, argv).run(); }
DOCTEST_MSVC_SUPPRESS_WARNING_POP
#endif // TESTING_DEFINE_MAIN