#ifndef ___DUCKED_C_HPP___
#define ___DUCKED_C_HPP___

#include <boost/predef.h>
#include "Demangle.h"
#include "number"
#include "dl/array"
#include "dl/concepts"
#include "dl/string"
#include "dl/variant"
#include "dl/tuple"
#include "dl/nytl.hpp"
#include "optional.hpp"
#include "expected.hpp"

#if OS_WINDOWS
#	include "dl/windows.hpp"
#endif

// Code run at program startup (switches to UTF8 mode)
__attribute__((constructor))
void __DUCKLIB_INIT__(){
#if OS_WINDOWS
	__DUCKLIB_WINDOWS_INIT__();
#endif

	// Set the default local to handle UTF8
	std::setlocale(LC_ALL, (std::locale().name() + ".UTF-8").c_str());
}

namespace dl::builtin {
	// String is now a "builtin" type
	typedef dl::string string;
	typedef dl::basic_string<unsigned char> ustring;
	// Arrays are "builtin" types
	template<typename T, size_t size> struct array: public dl::array<T, size> { using dl::array<T, size>::array; };
	template<class T, class Allocator = std::allocator<T>> struct dynarray: std::dynamic_array<T, Allocator> { using std::dynamic_array<T, Allocator>::dynamic_array; };

	template<typename... Ts> using variant = dl::variant<Ts...>;
	template<typename... Ts> using tuple = dl::tuple<Ts...>;
	using any = dl::any;
	// optional is "builtin" types
	using namespace tl;


	// Byte is now a "builtin" type
	typedef std::byte byte;
	// Allow bytes to be input and output
	inline std::ostream& operator << (std::ostream& s, const byte b) {
		auto f = s.flags();
		s << std::showbase << std::hex << (int) b;
		s.flags(f);
		return s;
	}
	inline std::istream& operator >> (std::istream& s, byte& b) {
		uint8_t tmp;
		auto f = s.flags();
		s >> std::showbase >> std::hex >> tmp;
		b = byte {tmp};
		s.flags(f);
		return s;
	}
}

namespace dl::literals {
	// Import literals from std::chrono
	using namespace std::literals::chrono_literals;
	using namespace std::literals::complex_literals;
}





// Macro which converts a c++ container to a c ptr/size pair
#define cstyle(x) dl::builtin::data_ptr(x), dl::builtin::len(x)
#define cstyler(x) dl::builtin::len(x), dl::builtin::data_ptr(x) // Reversed version
#define cstyleR(x) dl::builtin::len(x), dl::builtin::data_ptr(x) // Reversed version
#define cstyle_r(x) dl::builtin::len(x), dl::builtin::data_ptr(x) // Reversed version

namespace dl::builtin {
	// data built in function
	constexpr inline const char* data_ptr(const char* s) noexcept { return s; }
	inline const char* data_ptr(std::string& s) noexcept { return s.c_str(); }
	inline const char* data_ptr(std::string&& s) noexcept { return s.c_str(); }
	inline const char* data_ptr(const std::string& s) noexcept { return s.c_str(); }
	inline const char* data_ptr(const std::string&& s) noexcept { return s.c_str(); }
	inline const char* data_ptr(dl::string& s) noexcept { return s.c_str(); }
	inline const char* data_ptr(dl::string&& s) noexcept { return s.c_str(); }
	inline const char* data_ptr(const dl::string& s) noexcept { return s.c_str(); }
	inline const char* data_ptr(const dl::string&& s) noexcept { return s.c_str(); }
	template <typename T> constexpr inline const T* data_ptr(const T& a) noexcept { return a.data(); }
	template <typename T> constexpr inline const T* data_ptr(const T&& a) noexcept { return a.data(); }

	// len built in function
	inline size_t len(const char* s) { return strlen(s); }
	template <typename T, size_t N> constexpr inline size_t len(const std::array<T, N>& a) noexcept { return N; }
	template <typename T, size_t N> constexpr inline size_t len(const std::array<T, N>&& a) noexcept { return N; }
	template <typename T> constexpr inline size_t len(const T& s) noexcept { return s.size(); }
	template <typename T> constexpr inline size_t len(const T&& s) noexcept { return s.size(); }

	// Output operator for linear containers
	template<typename... T> inline std::ostream& operator << (std::ostream& s, const std::tuple<T...>& t); // Tuple prototype
	template<typename... T> inline std::ostream& operator << (std::ostream& s, const std::tuple<T...>&& t); // Tuple prototype
	template<typename T, size_t N> inline std::ostream& operator << (std::ostream& s, const std::array<T, N>& a) { if(a.empty()) return s << "[]"; s << "["; for (const T& cur: a) s << cur << ", "; return s << "\b\b]"; }
	template<typename T, size_t N> inline std::ostream& operator << (std::ostream& s, const std::array<T, N>&& a) { if(a.empty()) return s << "[]"; s << "["; for (const T& cur: a) s << cur << ", "; return s << "\b\b]"; }
	// TODO: Multiarray
	template<typename T, size_t N> inline std::ostream& operator << (std::ostream& s, const std::span<T, N>& a) { if(a.empty()) return s << "[]"; s << "["; for (const T& cur: a) s << cur << ", "; return s << "\b\b]"; }
	template<typename T, size_t N> inline std::ostream& operator << (std::ostream& s, const std::span<T, N>&& a) { if(a.empty()) return s << "[]"; s << "["; for (const T& cur: a) s << cur << ", "; return s << "\b\b]"; }
	template<typename T> inline std::ostream& operator << (std::ostream& s, const std::vector<T>& a) { if(a.empty()) return s << "[]"; s << "["; for (const T& cur: a) s << cur << ", "; return s << "\b\b]"; }
	template<typename T> inline std::ostream& operator << (std::ostream& s, const std::vector<T>&& a) { if(a.empty()) return s << "[]"; s << "["; for (const T& cur: a) s << cur << ", "; return s << "\b\b]"; }
	template<typename... T> inline std::ostream& operator << (std::ostream& s, const std::tuple<T...>& t) { s << "("; std::apply([&](auto& ...x) {(..., [&]{ operator<<(s, x) << ", "; }());}, t); return s << "\b\b)"; }
	template<typename... T> inline std::ostream& operator << (std::ostream& s, const std::tuple<T...>&& t) { s << "("; std::apply([&](auto& ...x) {(..., [&]{ operator<<(s, x) << ", "; }());}, t); return s << "\b\b)"; }
	// Output operator for optional, expected, and variant
	inline std::ostream& operator << (std::ostream& s, const std::nullopt_t) { return s << "<null>"; }
	template<typename T> inline std::ostream& operator << (std::ostream& s, const std::optional<T>& o) { if(o) return s << *o; return s << "<null>"; }
	template<typename T> inline std::ostream& operator << (std::ostream& s, const std::optional<T>&& o) { if(o) return s << *o; return s << "<null>"; }
	template<typename T> inline std::ostream& operator << (std::ostream& s, const tl::optional<T>& o) { if(o) return s << *o; return s << "<null>"; }
	template<typename T> inline std::ostream& operator << (std::ostream& s, const tl::optional<T>&& o) { if(o) return s << *o; return s << "<null>"; }
	template<typename T, typename E> inline std::ostream& operator << (std::ostream& s, const tl::expected<T, E>& o) { if(o) return s << *o; return s << "error(" << o.geterr() << ")"; }
	template<typename T, typename E> inline std::ostream& operator << (std::ostream& s, const tl::expected<T, E>&& o) { if(o) return s << *o; return s << "error(" << o.geterr() << ")"; }
	inline std::ostream& operator << (std::ostream& s, const std::monostate) { return s << "<null>"; }
	template<class T1, class... Ts> inline std::ostream& operator << (std::ostream& s, const std::variant<T1, Ts...>& v) { std::visit([&](const auto& x) { s << x; }, std::forward<const std::variant<T1, Ts...>&>(v)); return s; }
	template<class T1, class... Ts> inline std::ostream& operator << (std::ostream& s, const std::variant<T1, Ts...>&& v) { std::visit([&](const auto& x) { s << x; }, std::forward<const std::variant<T1, Ts...>&&>(v)); return s; }
	// Output operator for spaceship (<=>) results
	inline std::ostream& operator << (std::ostream& s, const std::partial_ordering o) {
		if(o == std::partial_ordering::less) return s << (s.flags() & std::ios_base::boolalpha ? "less" : "<");
		else if(o == std::partial_ordering::equivalent) return s << (s.flags() & std::ios_base::boolalpha ? "equivalent" : "=");
		else if(o == std::partial_ordering::greater) return s << (s.flags() & std::ios_base::boolalpha ? "greater" : ">");
		else return s << (s.flags() & std::ios_base::boolalpha ? "unordered" : "?");
	}

	// str built in function
	inline dl::string str(std::string& s) { return s; }
	inline dl::string str(std::string&& s) { return std::move(s); }
	inline const dl::string str(const std::string& s) { return s; }
	inline const dl::string str(const std::string&& s) { return std::move(s); }
	inline dl::string str(dl::string& s) { return s; }
	inline dl::string str(dl::string&& s) { return std::move(s); }
	inline const dl::string str(const dl::string& s) { return s; }
	inline const dl::string str(const dl::string&& s) { return s; }
	inline dl::string str(std::string_view& s) { return dl::string(s); }
	inline dl::string str(std::string_view&& s) { return dl::string(std::move(s)); }
	inline const dl::string str(const std::string_view& s) { return dl::string(s); }
	inline const dl::string str(const std::string_view&& s) { return dl::string(std::move(s)); }
	inline dl::string str(dl::string::view& s) { return dl::string(s); }
	inline dl::string str(dl::string::view&& s) { return dl::string(std::move(s)); }
	inline const dl::string str(const dl::string::view& s) { return dl::string(s); }
	inline const dl::string str(const dl::string::view&& s) { return dl::string(s); }
	template<typename T> inline dl::string str(T& s) { std::ostringstream out; out << s; return out.str(); }
	template<typename T> inline dl::string str(T&& s) { std::ostringstream out; out << s; return out.str(); }
	template<typename T> inline const dl::string str(const T& s) { std::ostringstream out; out << s; return out.str(); }
	template<typename T> inline const dl::string str(const T&& s) { std::ostringstream out; out << s; return out.str(); }

	// Contains wrappers (automatically picks up if the class has an explicit contains function, otherwises uses find != npos, or std::find if all else fails)
	template <std::concepts::has_contains_function T, typename T2> constexpr inline bool contains(const T haystack, const T2 needle) { return haystack.contains(needle); }
	template <std::concepts::has_find_function T, typename T2> requires (!std::concepts::has_contains_function<T> && !std::concepts::has_npos_constant<T>) constexpr inline bool contains(const T haystack, const T2 needle) { return haystack.find(needle) != haystack.end(); }
	template <std::concepts::has_find_function T, typename T2> requires (!std::concepts::has_contains_function<T> && std::concepts::has_npos_constant<T>) constexpr inline bool contains(const T haystack, const T2 needle) { return haystack.find(needle) != T::npos; }
	template <std::concepts::iterable T, typename T2> requires (!std::concepts::has_contains_function<T> && !std::concepts::has_find_function<T>) constexpr inline bool contains(const T haystack, const T2 needle) { return std::find(haystack.begin(), haystack.end(), needle) != haystack.end(); }

	// Typesafe varidic min/max // TODO: look at generated assembly of these functions
	template <typename T1, typename T2> constexpr inline typename std::common_type<T1, T2>::type max(T1&& a, T2&& b) noexcept { return a > b ? std::forward<T1>(a) : std::forward<T2>(b); }
	template <typename T, typename... Ts> constexpr inline typename std::common_type<T, Ts...>::type max(T&& a, Ts&&... rest) noexcept { return max(std::forward<T>(a), max(std::forward<Ts>(rest)...)); }
	template <typename T1, typename T2> constexpr inline typename std::common_type<T1, T2>::type min(T1&& a, T2&& b) noexcept { return a < b ? std::forward<T1>(a) : std::forward<T2>(b); }
	template <typename T, typename... Ts> constexpr inline typename std::common_type<T, Ts...>::type min(T&& a, Ts&&... rest) noexcept { return min(std::forward<T>(a), min(std::forward<Ts>(rest)...)); }
	// Custom comparison
	template <typename T1, typename T2, typename Compare> constexpr inline typename std::common_type<T1, T2>::type maxc(const Compare comp, T1&& a, T2&& b) noexcept { return comp(a, b) ? std::forward<T1>(a) : std::forward<T2>(b); }
	template <typename T, typename... Ts, typename Compare> constexpr inline typename std::common_type<T, Ts...>::type maxc(const Compare comp, T&& a, Ts&&... rest) noexcept { return maxc(comp, std::forward<T>(a), maxc(comp, std::forward<Ts>(rest)...)); }
	template <typename T1, typename T2, typename Compare> constexpr inline typename std::common_type<T1, T2>::type minc(const Compare comp, T1&& a, T2&& b) noexcept { return comp(a, b) ? std::forward<T1>(a) : std::forward<T2>(b); }
	template <typename T, typename... Ts, typename Compare> constexpr inline typename std::common_type<T, Ts...>::type minc(const Compare comp, T&& a, Ts&&... rest) noexcept { return minc(comp, std::forward<T>(a), minc(comp, std::forward<Ts>(rest)...)); }

	// Boolean (varargs) any, all, and none functions.
	constexpr inline bool any_of() noexcept { return false; }
	template<typename... Args> constexpr inline bool any_of(const bool first, Args... args) noexcept { if (first) return true; else return any_of(args...); }
	constexpr inline bool all_of() noexcept { return true; }
	template<typename... Args> constexpr inline bool all_of(const bool first, Args... args) noexcept { if (first) return all_of(args...); else return false; }
	constexpr inline bool none_of() noexcept { return true; }
	template<typename... Args> constexpr inline bool none_of(const bool first, Args... args) noexcept { if (first) return false; else return none_of(args...); }

	// Typename demangler
	inline string demangle(const std::type_info& type) { return folly::demangle(type); }
}

namespace std {
	// Drag slicing into std
	using dl::slice;
	using dl::slice_inclusive;

	// Import functions for optional and expected
	using namespace tl;

	// Boolean (varargs) any, all, and none functions (aliases to the builtin versions)
	constexpr inline bool any_of() noexcept { return dl::builtin::any_of(); }
	template<typename... Args> constexpr inline bool any_of(bool first, Args... args) noexcept { return dl::builtin::any_of(first, args...); }
	constexpr inline bool all_of() noexcept { return dl::builtin::all_of(); }
	template<typename... Args> constexpr inline bool all_of(bool first, Args... args) noexcept { return dl::builtin::all_of(first, args...); }
	constexpr inline bool none_of() noexcept { return dl::builtin::none_of(); }
	template<typename... Args> constexpr inline bool none_of(bool first, Args... args) noexcept { return dl::builtin::any_of(first, args...); }

	// Typename demangler (alias to the builtin version)
	inline string demangle(const std::type_info& type) { return dl::builtin::demangle(type); }

	template<> struct hash<dl::string> : hash<std::string> {};
	template<> struct hash<dl::string::view> : hash<std::string_view> {};
	template<class T, size_t N> struct hash<dl::array<T, N>> : hash<std::array<T, N>> {};
	template<class T, class A> struct hash<dl::vector<T, A>> : hash<std::vector<T, A>> {};
	template<class T, class A> struct hash<std::dynamic_array<T, A>> : hash<dl::vector<T, A>> {};
}

// Unndefine min/max macros
#ifdef MAX
#undef MAX
#endif
#ifdef max
#undef max
#endif
#ifdef MIN
#undef MIN
#endif
#ifdef min
#undef min
#endif

#endif // ___DUCKED_C_HPP___
