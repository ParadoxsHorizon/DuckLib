#ifndef ___DUCKED_C_TYPE_TRAITS_HPP___
#define ___DUCKED_C_TYPE_TRAITS_HPP___
#include <type_traits>

#include <cstdint>

#include <NamedType/include/NamedType/named_type.hpp>

// Converts a reference of one type to another type... no checks are performed, no bits are changed, can cast away const, it is completely unsafe
template<typename Out, typename In>
constexpr inline Out& reference_cast(In& in) noexcept { return *((Out*) &in); }

namespace std {
	// Bring in NamedTypes
	using namespace fluent;
	// Create an idomatic wrapper for NamedTypes
	template <typename T, typename Parameter, template <typename> class... Skills>
	struct named_type: public NamedType<T, Parameter, Skills...> {
		using type = T;
		using NamedType<T, Parameter, Skills...>::NamedType;
	};


	// Class providing a helper for implementing the Curiously Recursive Template Pattern (based on the one included in NamedTypes)
	template <typename T, template <typename...> class crtpType>
	struct crtp {
		constexpr T& underlying() { return static_cast<T&>(*this); }
		constexpr T const& underlying() const { return static_cast<T const&>(*this); }
	};


	// Meta Traits to determine if/how many times a type appears in a pack
	// https://stackoverflow.com/questions/2118541/check-if-parameter-pack-contains-a-type
	// TODO: Rework users to use meta::lists
	template < typename Tp, typename... List >
	struct pack_contains_type : true_type {};

	// Function which determines if a pack contains a type
	template < typename Tp, typename Head, typename... Rest >
	struct pack_contains_type<Tp, Head, Rest...>
	: conditional< is_same<Tp, Head>::value,
		true_type,
		pack_contains_type<Tp, Rest...>
	>::type {};

	template < typename Tp >
	struct pack_contains_type<Tp> : false_type {};

	template < typename Tp, typename... List >
	constexpr bool pack_contains_type_v = pack_contains_type<Tp, List...>::value;


	// Meta Traits to determine how many times a type appears in a pack
	template < typename Tp, typename... List >
	struct pack_count_type : integral_constant<size_t, 0> {};

	template < typename Tp, typename Head, typename... Rest >
	struct pack_count_type<Tp, Head, Rest...>
	: conditional< is_same<Tp, Head>::value,
		integral_constant<size_t, 1 + pack_count_type<Tp, Rest...>::value>,
		pack_count_type<Tp, Rest...>
	>::type {};

	template < typename Tp >
	struct pack_count_type<Tp> : integral_constant<size_t, 0>  {};

	template < typename Tp, typename... List >
	constexpr bool pack_count_type_v = pack_count_type<Tp, List...>::value;


	// -- Meta List From: https://github.com/agruzdev/Yato --


	namespace meta {
		//-------------------------------------------------------
		// meta::pair

		/**
		 * Pair of types
		 */
		template <typename Ty1_, typename Ty2_>
		struct pair {
			using first_type  = Ty1_;
			using second_type = Ty2_;
		};

		//-------------------------------------------------------
		// meta::list
		//

		/**
		 *  Empty list of types
		 */
		struct null_list {};

		/**
		 *  Non-position value of index in the list
		 */
		inline constexpr
		size_t list_npos = std::numeric_limits<size_t>::max();

		/**
		 *  List for aggregating a sequence of types
		 */
		template<typename Head_, typename... Tail_>
		struct list {
			using head = Head_;
			using tail = list<Tail_...>;
		};

		/**
		 *  List consisting of one element
		 */
		template<typename Head_>
		struct list<Head_> {
			using head = Head_;
			using tail = null_list;
		};

		/**
		 *  make list from variadic template
		 */
		template<typename... Elems_>
		struct make_list {
			using type = list<Elems_...>;
		};

		/**
		 *  make empty list
		 */
		template<>
		struct make_list<> {
			using type = null_list;
		};

		template <typename... Elems_>
		using make_list_t = typename make_list<Elems_...>::type;

		/**
		 * Make list of N copies of type
		 */
		template <typename Ty_, size_t N_, typename... Elems_>
		struct list_dup {
			using type = typename list_dup<Ty_, N_ - 1, Ty_, Elems_...>::type;
		};

		template <typename Ty_, typename... Elems_>
		struct list_dup<Ty_, 0, Elems_...> {
			using type = make_list_t<Elems_...>;
		};

		template <typename Ty_, size_t N_>
		using list_dup_t = typename list_dup<Ty_, N_>::type;

		/**
		 *  Reverse list
		 */
		template<typename List_, typename... Elems_>
		struct reverse_list {
			using type = typename reverse_list<typename List_::tail, typename List_::head, Elems_...>::type;
		};

		template<typename... Elems_>
		struct reverse_list<null_list, Elems_...> {
			using type = list<Elems_...>;
		};

		/**
		 *  Add list element to the begin
		 */
		template<typename Ty_, typename List_, typename... Elems_>
		struct list_push_front {
			using type = typename list_push_front<Ty_, typename List_::tail, Elems_..., typename List_::head>::type;
		};

		template<typename Ty_, typename... Elems_>
		struct list_push_front<Ty_, null_list, Elems_...> {
			using type = list<Ty_, Elems_...>;
		};

		/**
		 *  Add list element to the end
		 */
		template<typename List_, typename Ty_, typename... Elems_>
		struct list_push_back {
			using type = typename list_push_back<typename List_::tail, Ty_, Elems_..., typename List_::head>::type;
		};

		template<typename Ty_, typename... Elems_>
		struct list_push_back<null_list, Ty_, Elems_...> {
			using type = list<Elems_..., Ty_>;
		};

		/**
		 *  Concatenate two lists
		 */
		template<typename List1_, typename List2_, typename... Elems_>
		struct list_cat {
			using type = typename list_cat<typename List1_::tail, List2_, Elems_..., typename List1_::head>::type;
		};

		template<typename List2_, typename... Elems_>
		struct list_cat<null_list, List2_, Elems_...> {
			using type = typename list_cat<null_list, typename List2_::tail, Elems_..., typename List2_::head>::type;
		};

		template <typename... Elems_>
		struct list_cat<null_list, null_list, Elems_...> {
			using type = make_list_t<Elems_...>;
		};

		/**
		 *  Access list element
		 */
		template <typename List_, size_t Idx_>
		struct list_at {
			using type = typename list_at<typename List_::tail, Idx_ - 1>::type;
		};

		template <typename List_>
		struct list_at<List_, 0> {
			using type = typename List_::head;
		};

		template <typename List_, size_t Idx_>
		using list_at_t = typename list_at<List_, Idx_>::type;

		/**
		 *  Convert list to std::tuple
		 */
		template <typename List_, typename... Types_>
		struct list_to_tuple {
			using type = typename list_to_tuple <typename List_::tail, Types_..., typename List_::head>::type;
		};

		template <typename... Types_>
		struct list_to_tuple <null_list, Types_...> {
			using type = std::tuple<Types_...>;
		};


		/**
		 *  Find type in types list, value is index of found element
		 */
		template <typename List_, typename Type_, size_t Idx_ = 0>
		struct list_find
			: public std::integral_constant<size_t,
				std::is_same<typename List_::head, Type_>::value
				? Idx_
				: list_find<typename List_::tail, Type_, Idx_ + 1>::value> { };

		template <typename Type_, size_t Idx_>
		struct list_find<null_list, Type_, Idx_>
			: public std::integral_constant<size_t, list_npos> { };

		/**
		 *  Get list length
		 */
		template <typename List_>
		struct list_length
			: public std::integral_constant<size_t,
				1 + list_length<typename List_::tail>::value> { };

		template <>
		struct list_length<null_list>
			: public std::integral_constant<size_t, 0> { };


		/**
		 * Split list at the specified position
		 */
		template <typename List_, size_t Pos_, typename ... Elems_>
		struct list_split {
			using type = typename list_split<typename List_::tail, Pos_ - 1, Elems_..., typename List_::head>::type;
		};

		template <typename List_, typename... Elems_>
		struct list_split<List_, 0, Elems_...> {
			using type = meta::pair<meta::make_list_t<Elems_...>, List_>;
		};

		/**
		 * Merge two sorted list into one sorted list
		 */
		template <typename List1_, typename List2_, template<typename, typename> class Less_>
		struct list_merge {
			using type = typename std::conditional< Less_<typename List1_::head, typename List2_::head>::value,
				typename list_push_front< typename List1_::head, typename list_merge< typename List1_::tail, List2_, Less_>::type >::type,
				typename list_push_front< typename List2_::head, typename list_merge< List1_, typename List2_::tail, Less_>::type >::type
			>::type;
		};

		template <typename List1_, template<typename, typename> class Less_>
		struct list_merge<List1_, null_list, Less_> {
			using type = List1_;
		};

		template <typename List2_, template<typename, typename> class Less_>
		struct list_merge<null_list, List2_, Less_> {
			using type = List2_;
		};


		/**
		 * Sort list
		 */
		template <typename List_, template<typename, typename> class Less_, typename = void>
		struct list_sort {
			using parts = typename meta::list_split<List_, (meta::list_length<List_>::value / 2)>::type;
			using type  = typename meta::list_merge<
				typename list_sort<typename parts::first_type,  Less_>::type,
				typename list_sort<typename parts::second_type, Less_>::type,
				Less_
			>::type;
		};

		template <typename List_, template<typename, typename> class Less_>
		struct list_sort<List_, Less_, typename std::enable_if<
			(meta::list_length<List_>::value < 2)
		>::type> {
			using type = List_;
		};

		/**
		 * Remove duplicates from the list
		 */
		template <typename List_, typename... Elems_>
		struct list_unique {
			using type = typename std::conditional<(meta::list_find<meta::make_list_t<Elems_...>, typename List_::head>::value != meta::list_npos),
				typename list_unique<typename List_::tail, Elems_...>::type,
				typename list_unique<typename List_::tail, Elems_..., typename List_::head>::type
			>::type;
		};

		template <typename... Elems_>
		struct list_unique<meta::null_list, Elems_...> {
			using type = meta::make_list_t<Elems_...>;
		};
	}


	// -- Function Traits From: https://github.com/agruzdev/Yato --


	template <typename... T>
	struct is_function_pointer : std::false_type { };

	template <typename Ret, typename... Args>
	struct is_function_pointer<Ret(*)(Args...)> : std::true_type { };

	template <typename Ret, typename Clazz, typename... Args>
	struct is_function_pointer<Ret(Clazz::*)(Args...)> : std::true_type { };

	template <typename Ret, typename Clazz, typename ...Args>
	struct is_function_pointer<Ret(Clazz::*)(Args...) const> : std::true_type { };

	template <typename Ret, typename Clazz, typename ...Args>
	struct is_function_pointer<Ret(Clazz::*)(Args...) volatile> : std::true_type { };

	template <typename Ret, typename Clazz, typename ...Args>
	struct is_function_pointer<Ret(Clazz::*)(Args...) const volatile> : std::true_type { };

	template <typename _T, typename _Enable = void>
	struct has_operator_round_brackets : std::false_type { };

	template <typename _T>
	// struct has_operator_round_brackets <_T, typename test_type< decltype(&_T::operator()) >::type >
	struct has_operator_round_brackets <_T, typename std::void_t< decltype(&_T::operator()) > > : std::true_type { };

	template <typename _T>
	struct is_callable : std::integral_constant<bool, has_operator_round_brackets<_T>::value || is_function_pointer<_T>::value> { };

	/**
	 *  Converts function member type to function type
	 */

	namespace details {
		template <typename _T>
		struct remove_class_impl {};

		template <typename _Class, typename _Result, typename... _Args>
		struct remove_class_impl<_Result(_Class::*)(_Args...)> {
			using type = _Result(*)(_Args...);
		};

		template <typename _Class, typename _Result, typename... _Args>
		struct remove_class_impl<_Result(_Class::*)(_Args...) const> {
			using type = _Result(*)(_Args...);
		};

		template <typename _Class, typename _Result, typename... _Args>
		struct remove_class_impl<_Result(_Class::*)(_Args...) volatile> {
			using type = _Result(*)(_Args...);
		};

		template <typename _Class, typename _Result, typename... _Args>
		struct remove_class_impl<_Result(_Class::*)(_Args...) const volatile> {
			using type = _Result(*)(_Args...);
		};

		template <typename _Result, typename... _Args>
		struct remove_class_impl<_Result(*)(_Args...)> {
			using type = _Result(*)(_Args...);
		};
	}

	template <typename _T>
	using remove_class = details::remove_class_impl< typename std::remove_cv<_T>::type >;

	namespace details {
		template<typename T>
		struct function_trait {};

		template<typename _R, typename... _Args>
		struct function_trait< std::function<_R(_Args...)> > {
			static constexpr size_t arguments_num = sizeof...(_Args);

			using result_type = _R;
			using arguments_list = typename meta::make_list<_Args...>::type;

			template <size_t _Idx>
			struct arg {
				using type = typename meta::list_at<arguments_list, _Idx>::type;
			};

			using pointer_type = _R(*)(_Args...);
			using function_type = std::function<_R(_Args...)>;
		};

		template<typename _R, typename... _Args>
		struct function_trait< _R(*)(_Args...) > {
			static constexpr size_t arguments_num = sizeof...(_Args);

			using result_type = _R;
			using arguments_list = typename meta::make_list<_Args...>::type;

			template <size_t _Idx>
			struct arg {
				using type = typename meta::list_at<arguments_list, _Idx>::type;
			};

			using pointer_type = _R(*)(_Args...);
			using function_type = std::function<_R(_Args...)>;
		};

		/**
		*  For class members
		*/
		template<typename T>
		struct function_member_trait {};

		template<class _Class, typename _R, typename... _Args>
		struct function_member_trait< _R( _Class::* )(_Args...) > {
			static constexpr size_t arguments_num = sizeof...(_Args);

			using my_class = _Class;
			using result_type = _R;
			using arguments_list = typename meta::make_list<_Args...>::type;

			template <size_t _Idx>
			struct arg {
				using type = typename meta::list_at<arguments_list, _Idx>::type;
			};

			using pointer_type = _R(*)(_Args...);
			using function_type = std::function<_R(_Args...)>;
		};
	}

	/**
	 *  Deduce information about arguments and return type for a callable entity
	 */
	template <typename _T, typename _Enable = void>
	struct callable_trait { };

	template <typename _T>
	struct callable_trait <_T, typename std::enable_if<is_function_pointer<_T>::value>::type>
		: details::function_trait< typename remove_class<_T>::type > { };

	template <typename _T>
	struct callable_trait <_T, typename std::enable_if<has_operator_round_brackets<_T>::value>::type>
		: details::function_trait< typename remove_class<decltype(&_T::operator())>::type > { };

	/**
	 *  Make std::function from a callable entity
	 */
	template <typename _Callable>
	auto make_function(_Callable && callable) -> typename callable_trait<typename std::remove_reference<_Callable>::type>::function_type {
		return typename callable_trait<typename std::remove_reference<_Callable>::type>::function_type(std::forward<_Callable>(callable));
	}
}

#endif //___DUCKED_C_TYPE_TRAITS_HPP___
