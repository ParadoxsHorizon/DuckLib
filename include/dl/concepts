#ifndef ___DUCKED_C_CONCEPTS_HPP___
#define ___DUCKED_C_CONCEPTS_HPP___
#include <concepts>

#include <iostream>
#include <ranges>

namespace std {
	namespace concepts {
		// Concept stating that the type must have a contains member function which takes the type's value_type as input
		template<typename T>
		concept has_contains_function = requires(T a, typename T::value_type o) {
			a.contains(o);
		};
		// Concept stating that the type must have a find member function which takes the type's value_type as input
		template<typename T>
		concept has_find_function = requires(T a, typename T::value_type o) {
			a.find(o);
		};
		// Concept stating that the type has an npos static member
		template<typename T>
		concept has_npos_constant = requires(T a) {
			T::npos;
		};
		// Concept stating that the type is iterable
		template<typename T>
		concept iterable = std::ranges::range<T>;

		// TODO: add generic concept to check if a type has a function

		// Concept stating that the type can be output to an ostream
		template<typename T>
		concept outputable = requires(T a) {
			std::cout << a;
		};

		// Concept stating that the type can be input from an istream
		template<typename T>
		concept inputable = requires(T a) {
			std::cin >> a;
		};

		// Concept stating that the type can store a number and has arithmetic operations defined
		template<typename T>
		concept arithmetic = requires(T a) {
			std::is_arithmetic<T>::value == true;
		};
	}
}

#endif //___DUCKED_C_CONCEPTS_HPP___
