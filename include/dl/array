#ifndef ___DUCKED_C_ARRAY_HPP___
#define ___DUCKED_C_ARRAY_HPP___
#include <array>
#include <tuple>
#include <vector>
#include <span>
#include <dl/string>
#include "binary"

#include <experimental/mdspan>
#include <experimental/mdarray>

namespace dl {
	template<typename T, size_t size = std::dynamic_extent>
	struct span : public std::span<T, size> {
		using legacy = std::span<T, size>;
		using legacy::legacy;

		using legacy::operator[];
		slice operator[](dl::slice s) { 
			s = s.apply_size(legacy::size());
			return {legacy::data() + s.first, s.second - s.first};
		}

	
		// Function whichs finds an element in the array
		constexpr auto find(const T& needle) const {
			for(auto cur = legacy::begin(), end = legacy::end(); cur != end; cur++)
				if(*cur == needle)
					return cur;

			return legacy::end();
		}
		constexpr inline auto find(const T&& needle) const { return find(needle); }

		// Function which checks if the array contains a value
		constexpr inline auto contains(const T& needle) const { return find(needle) != legacy::end(); }
		constexpr inline auto contains(const T&& needle) const { return find(needle) != legacy::end(); }
	};


	// TODO: Allow concatenation with spans
	template<typename T, size_t size>
	struct array: public std::array<T, size> {
		using legacy = std::array<T, size>;
		using legacy::legacy;

		using slice = span<T, std::dynamic_extent>;
		static constexpr size_t extent = size;

		// Constructor which initializes the array with the given value
		template<typename... Elems>
		constexpr array(Elems... elems) : legacy({std::forward<Elems>(elems)...}) {}
		constexpr array(const T& default_) : legacy(fillInitialize(default_)) {}
		constexpr array(T&& default_) : array(default_) {}
		template<size_t spanSize>
		constexpr array(const std::span<T, spanSize> span) : legacy(spanInitialize(span)) {}

		using legacy::operator[];
		using legacy::at;
		slice operator[](dl::slice s) { 
			s = s.apply_size(legacy::size());
			return {legacy::data() + s.first, size_t{s.second - s.first}};
		}
		inline slice at(dl::slice s) { 
			auto sNorm = s.apply_size(legacy::size());
			if(sNorm.first > legacy::size() || sNorm.second > legacy::size() 
				|| sNorm.first < 0 || sNorm.second < 0) throw std::out_of_range(); // TODO: Add message...
			return legacy::operator[](sNorm);
		}

		template<size_t oSize>
		array<T, size + oSize> operator+(array<T, oSize>& o) {
			array<T, size + oSize> ret;
			if constexpr(std::is_trivially_copyable_v<T>){
				std::memcpy(ret.data(), legacy::data(), size * sizeof(T));
				std::memcpy(((char*)ret.data()) + size * sizeof(T), o.data(), oSize * sizeof(T));
			} else {
				int i = 0;
				for(auto& val: *this) ret[i++] = val;
				for(auto& val: o) ret[i++] = val;
			}
			return ret;
		}

		// Function whichs finds an element in the array
		constexpr auto find(const T& needle) const {
			for(auto cur = legacy::begin(), end = legacy::end(); cur != end; cur++)
				if(*cur == needle)
					return cur;

			return legacy::end();
		}
		constexpr inline auto find(const T&& needle) const { return find(needle); }

		// Function which checks if the array contains a value
		constexpr inline auto contains(const T& needle) const { return find(needle) != legacy::end(); }
		constexpr inline auto contains(const T&& needle) const { return find(needle) != legacy::end(); }

		inline auto as_bytes() const {
			std::array<std::byte, sizeof(T) * size> out;
			size_t b = 0;

			for(auto& c: *this)
				for(auto byte: std::as_bytes(c))
					out[b++] = byte;

			return out;
		}
		inline auto as_writable_bytes() const = delete;

		static inline auto from_bytes(const std::span<std::byte> _bytes) {
			array out;
			std::span<std::byte> bytes = _bytes;

			for(size_t i = 0; i < size; i++) {
				out[i] = std::move(std::from_bytes<T>(bytes)); // TODO: Should this move or copy?
				bytes = std::span{bytes.data() + sizeof(T), bytes.size() - sizeof(T)};
			}

			return out;
		}

	private:
		// Function which initializes an std::array filled with the given value
		constexpr static legacy fillInitialize(const T& value) {
			constexpr auto arrayGenerator = []<size_t... I>(const T& value, std::integer_sequence<size_t, I...> s) {
				constexpr auto fillGenerator = [](size_t _, const T& value) { return value; };
				return std::array<T, sizeof...(I)> { fillGenerator(I, value)... };
			};

			return arrayGenerator(value, std::make_index_sequence<size>{});
		}

		// Function which initializes an std::array filled with the values coppied from a span
		template<size_t spanSize>
		constexpr static legacy spanInitialize(const std::span<T, spanSize> span) requires(spanSize >= size) {	
			constexpr auto arrayGenerator = []<size_t... I>(const std::span<T, spanSize> span, std::integer_sequence<size_t, I...> s) {
				constexpr auto fillGenerator = [](size_t i, const std::span<T, spanSize> span) { return span[i]; };
				return std::array<T, sizeof...(I)> { fillGenerator(I, span)... };
			};

			if constexpr(spanSize == std::dynamic_extent)
				if(span.size() < size) throw std::invalid_argument("Attempted to intialize an array with a smaller span");
			return arrayGenerator(span, std::make_index_sequence<size>{});
		}
	};

	template<class T, class Allocator = std::allocator<T>>
	struct vector: public std::vector<T, Allocator> {
		using legacy = std::vector<T, Allocator>;
		using legacy::legacy;

		using slice = span<T, std::dynamic_extent>;

		using legacy::operator[];
		slice operator[](dl::slice s) { 
			s = s.apply_size(legacy::size());
			return {legacy::data() + s.first, size_t{s.second - s.first}};
		}
		slice at(dl::slice s) {
			auto sNorm = s.apply_size(legacy::size());
			if(sNorm.first > legacy::size() || sNorm.second > legacy::size() 
				|| sNorm.first < 0 || sNorm.second < 0) throw std::out_of_range(); // TODO: Add message...
			return legacy::operator[](sNorm);
		}

		vector operator+(vector& o) {
			vector ret;
			ret.resize(legacy::size() + o.size());
			if constexpr(std::is_trivially_copyable_v<T>){
				std::memcpy(ret.data(), legacy::data(), legacy::size() * sizeof(T));
				std::memcpy(((char*)ret.data()) + legacy::size() * sizeof(T), o.data(), o.size() * sizeof(T));
			} else {
				int i = 0;
				for(auto& val: *this) ret[i++] = val;
				for(auto& val: o) ret[i++] = val;
			}
			return ret;
		}
		vector& operator+=(vector& o) { return *this = *this + o; }

		vector operator*(size_t times) {
			vector ret;
			ret.resize(legacy::size() * times);
			for(int i = 0; i < times; i++)
				if constexpr(std::is_trivially_copyable_v<T>)
					std::memcpy(((char*)ret.data()) + legacy::size() * sizeof(T) * i, legacy::data(), legacy::size() * sizeof(T));
				else {
					int j = legacy::size() * i;
					for(auto& val: *this) ret[j++] = val;
				}
			return ret;
		}
		vector& operator*=(size_t times) { return *this = (*this * times); }

		// Function whichs finds an element in the array
		constexpr auto find(const T& needle) const {
			for(auto cur = legacy::begin(), end = legacy::end(); cur != end; cur++)
				if(*cur == needle)
					return cur;

			return legacy::end();
		}
		constexpr inline auto find(const T&& needle) const { return find(needle); }

		// Function which checks if the array contains a value
		constexpr inline auto contains(const T& needle) const { return find(needle) != legacy::end(); }
		constexpr inline auto contains(const T&& needle) const { return find(needle) != legacy::end(); }

		// Fills the array with a value
		constexpr inline void fill(const T& value) { std::fill(legacy::begin(), legacy::end(), value); }

		inline auto as_bytes() const {
			std::vector<std::byte> out;
			out.reserve(sizeof(size_t) + legacy::size() * sizeof(T));

			size_t size = legacy::size();
			for(auto byte: std::as_writable_bytes(size))
				out.push_back(byte);

			for(auto& c: *this)
				for(auto byte: std::as_bytes(c))
					out.push_back(byte);

			return out;
		}
		inline auto as_writable_bytes(std::vector<T>& data) const = delete;

		static inline auto from_bytes(const std::span<std::byte> _bytes) {
			size_t size = std::from_bytes<size_t>(_bytes);
			vector out;
			out.reserve(size);

			auto bytes = std::span{_bytes.data() + sizeof(size_t), _bytes.size() - sizeof(size_t)};
			for(size_t i = 0; i < size; i++) {
				out.emplace_back(std::move(std::from_bytes<T>(bytes))); // TODO: Should this move or copy?
				bytes = std::span{bytes.data() + sizeof(T), bytes.size() - sizeof(T)};
			}

			return out;
		}
	};
}

namespace std {
	// Import mdspan and mdarray
	using namespace std::experimental;

	// Vector which automatically resizes itself to be as large as you request it to be
	template <typename T, class Allocator = std::allocator<T>>
	class dynamic_array : public dl::vector<T, Allocator> {
		using Base = dl::vector<T, Allocator>;
	public:
		using Base::Base;
		dynamic_array(const Base& base) : Base(base) {}
		dynamic_array(Base&& base) : Base(std::move(base)) {}
		using Base::operator=;
		using Base::operator[];

		// The at function automatically resizes the array if trying to access an element outside of its current bounds
		constexpr T& at(size_t index) {
			if(index > Base::size() || Base::empty())
				Base::resize(index + 1);

			return Base::operator[](index);
		}
		constexpr T& at(dl::slice s) {
			s = s.apply_size(Base::size());
			if(s.second > Base::size() || Base::empty())
				Base::resize(s.second + 1);

			return Base::operator[](s);
		}
		// The const version will invoke an error if trying to access an element outside of the reserved array
		constexpr const T& at(size_t index) const {
			return Base::at(index);
		}
		constexpr const T& at(dl::slice slice) const {
			return Base::at(slice);
		}

		dynamic_array operator+(dynamic_array& o) { return reference_cast<Base>(*this) + reference_cast<Base>(o); }
		dynamic_array& operator+=(dynamic_array& o) { return reference_cast<dynamic_array>(reference_cast<Base>(*this) += reference_cast<Base>(o)); }
		dynamic_array operator*(size_t times) { return reference_cast<Base>(*this) * times; }
		dynamic_array& operator*=(size_t times) { return reference_cast<dynamic_array>(reference_cast<Base>(*this) *= times); }

		constexpr T& operator[](size_t index) { return at(index); }
		constexpr const T& operator[](size_t index) const { return at(index); }
	};
}

#endif /* end of include guard: ___DUCKED_C_ARRAY_HPP___ */
