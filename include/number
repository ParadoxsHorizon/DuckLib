#ifndef ___DUCKED_C_NUMBER_HPP___
#define ___DUCKED_C_NUMBER_HPP___

#include <boost/multiprecision/cpp_bin_float.hpp>
#include <boost/multiprecision/cpp_int.hpp>
#include <boost/safe_numerics/safe_integer.hpp>
#include "half.hpp"

#include <cstdint>
#include <cstddef>

namespace std {
	template<typename T>
	concept has_numeric_limits = requires() {
		std::numeric_limits<T>::is_specialized == true;
	};

	template <has_numeric_limits T>
	class numeric_limits_wrapper;

	template <typename>
	struct is_numeric_limits_wrapper : public std::false_type { };

	template <typename T>
	struct is_numeric_limits_wrapper<numeric_limits_wrapper<T>> : public std::true_type { };

	template<typename T>
	concept has_numeric_limits_not_wrapper = has_numeric_limits<T> && !is_numeric_limits_wrapper<T>::value;


	template <has_numeric_limits T>
	class numeric_limits_wrapper {
		T value;
	public:
		constexpr numeric_limits_wrapper() = default;

		template<has_numeric_limits_not_wrapper To>
		constexpr numeric_limits_wrapper(To value) : value(value) {}
		template<has_numeric_limits_not_wrapper To>
		constexpr numeric_limits_wrapper(numeric_limits_wrapper<To> o) : value(o.value) {}

		operator T() { return value; }
		// template<has_numeric_limits To> constexpr inline operator To() const { return value; }

		// Numeric Limits Wrappers
		static constexpr bool is_signed = std::numeric_limits<T>::is_signed;
		static constexpr bool is_integer = std::numeric_limits<T>::is_integer;
		static constexpr bool is_exact = std::numeric_limits<T>::is_exact;
		static constexpr bool has_infinity = std::numeric_limits<T>::has_infinity;
		static constexpr bool has_quiet_nan = std::numeric_limits<T>::has_quiet_NaN;
		static constexpr bool has_signaling_nan = std::numeric_limits<T>::has_signaling_NaN;
		static constexpr bool has_denorm = std::numeric_limits<T>::has_denorm;
		static constexpr bool has_denorm_loss = std::numeric_limits<T>::has_denorm_loss;
		static constexpr bool round_style = std::numeric_limits<T>::round_style;
		static constexpr bool is_iec559 = std::numeric_limits<T>::is_iec559;
		static constexpr bool is_bounded = std::numeric_limits<T>::is_bounded;
		static constexpr bool is_modulo = std::numeric_limits<T>::is_modulo;
		static constexpr int digits = std::numeric_limits<T>::digits;
		static constexpr int digits10 = std::numeric_limits<T>::digits10;
		static constexpr int max_digits10 = std::numeric_limits<T>::max_digits10;
		static constexpr int radix = std::numeric_limits<T>::radix;
		static constexpr int min_exponent = std::numeric_limits<T>::min_exponent;
		static constexpr int min_exponent10 = std::numeric_limits<T>::min_exponent10;
		static constexpr int max_exponent = std::numeric_limits<T>::max_exponent;
		static constexpr int max_exponent10 = std::numeric_limits<T>::max_exponent10;
		static constexpr bool traps = std::numeric_limits<T>::traps;
		static constexpr bool tinyness_before = std::numeric_limits<T>::tinyness_before;

		static constexpr T min = std::numeric_limits<T>::min();
		static constexpr T lowest = std::numeric_limits<T>::lowest();
		static constexpr T max = std::numeric_limits<T>::max();
		static constexpr T epsilon = std::numeric_limits<T>::epsilon();
		static constexpr T round_error = std::numeric_limits<T>::round_error();
		static constexpr T infinity = std::numeric_limits<T>::infinity();
		static constexpr T nan = std::numeric_limits<T>::signaling_NaN();
		static constexpr T quiet_nan = std::numeric_limits<T>::quiet_NaN();
		static constexpr T signaling_nan = std::numeric_limits<T>::signaling_NaN();
		static constexpr T denorm_min = std::numeric_limits<T>::denorm_min();

		// Base Type Operator wrappers
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper& operator+=(To other) { value += other; return *this; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper& operator-=(To other) { value -= other; return *this; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper& operator*=(To other) { value *= other; return *this; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper& operator/=(To other) { value /= other; return *this; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper& operator%=(To other) { value %= other; return *this; }

		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper<std::common_type_t<T, To>> operator+(To other) const { return value + other; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper<std::common_type_t<T, To>> operator-(To other) const { return value - other; }
		// template<has_numeric_limits To> constexpr inline numeric_limits_wrapper							   operator-()		   const { return -value; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper<std::common_type_t<T, To>> operator*(To other) const { return value * other; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper<std::common_type_t<T, To>> operator/(To other) const { return value / other; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper<std::common_type_t<T, To>> operator%(To other) const { return value % other; }

		template<has_numeric_limits_not_wrapper To> constexpr inline auto operator <=>(To other) const { return value <=> other; }
		template<has_numeric_limits_not_wrapper To> constexpr inline bool operator ==(To other) const { return value == other; }

		// Wrapped Type Operator wrappers
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper& operator+=(numeric_limits_wrapper<To> other) { value += other.value; return *this; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper& operator-=(numeric_limits_wrapper<To> other) { value -= other.value; return *this; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper& operator*=(numeric_limits_wrapper<To> other) { value *= other.value; return *this; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper& operator/=(numeric_limits_wrapper<To> other) { value /= other.value; return *this; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper& operator%=(numeric_limits_wrapper<To> other) { value %= other.value; return *this; }

		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper<std::common_type_t<T, To>> operator+(numeric_limits_wrapper<To> other) const { return value + other.value; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper<std::common_type_t<T, To>> operator-(numeric_limits_wrapper<To> other) const { return value - other.value; }
		constexpr inline numeric_limits_wrapper							   operator-()		   const { return -value; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper<std::common_type_t<T, To>> operator*(numeric_limits_wrapper<To> other) const { return value * other.value; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper<std::common_type_t<T, To>> operator/(numeric_limits_wrapper<To> other) const { return value / other.value; }
		template<has_numeric_limits_not_wrapper To> constexpr inline numeric_limits_wrapper<std::common_type_t<T, To>> operator%(numeric_limits_wrapper<To> other) const { return value % other.value; }

		template<has_numeric_limits_not_wrapper To> constexpr inline auto operator <=>(numeric_limits_wrapper<To> other) const { return value <=> other.value; }
		template<has_numeric_limits_not_wrapper To> constexpr inline auto operator ==(numeric_limits_wrapper<To> other) const { return value == other.value; }
	};

	template <has_numeric_limits_not_wrapper T>
	struct numeric_limits<numeric_limits_wrapper<T>> : public numeric_limits<T> {};
}

namespace dl::builtin {
	// Rational type
	typedef boost::multiprecision::cpp_rational rational;
	// Arbitrary precision int
	typedef boost::multiprecision::cpp_int int_arbitrary;
	typedef boost::multiprecision::cpp_int iarb;
	// Raw Integer Type Defines
	typedef int8_t i8r;
	typedef int16_t i16r;
	typedef int32_t i32r;
	typedef int64_t i64r;
	typedef boost::multiprecision::int128_t i128r;
	typedef boost::multiprecision::int256_t i256r;
	typedef boost::multiprecision::int512_t i512r;
	typedef boost::multiprecision::int1024_t i1024r;
	typedef uint8_t u8r;
	typedef uint16_t u16r;
	typedef uint32_t u32r;
	typedef uint64_t u64r;
	typedef boost::multiprecision::uint128_t u128r;
	typedef boost::multiprecision::uint256_t u256r;
	typedef boost::multiprecision::uint512_t u512r;
	typedef boost::multiprecision::uint1024_t u1024r;
	// Raw Fast types
	typedef int_fast8_t i8fr;
	typedef int_fast16_t i16fr;
	typedef int_fast32_t i32fr;
	typedef int_fast64_t i64fr;
	typedef i128r i128fr;
	typedef i256r i256fr;
	typedef i512r i512fr;
	typedef i1024r i1024fr;
	typedef uint_fast8_t u8fr;
	typedef uint_fast16_t u16fr;
	typedef uint_fast32_t u32fr;
	typedef uint_fast64_t u64fr;
	typedef u128r u128fr;
	typedef u256r u256fr;
	typedef u512r u512fr;
	typedef u1024r u1024fr;
	// Raw Safe types
	typedef boost::safe_numerics::safe<int> intsr;
	typedef boost::multiprecision::checked_cpp_rational rational_safe;
	typedef boost::multiprecision::checked_cpp_rational rationals;
	typedef boost::multiprecision::checked_cpp_int int_arbitrary_safe;
	typedef boost::multiprecision::checked_cpp_int iarb_safe;
	typedef boost::multiprecision::checked_cpp_int iarbs;
	typedef boost::safe_numerics::safe<int8_t> i8sr;
	typedef boost::safe_numerics::safe<int16_t> i16sr;
	typedef boost::safe_numerics::safe<int32_t> i32sr;
	typedef boost::safe_numerics::safe<int64_t> i64sr;
	typedef boost::multiprecision::checked_int128_t i128sr;
	typedef boost::multiprecision::checked_int256_t i256sr;
	typedef boost::multiprecision::checked_int512_t i512sr;
	typedef boost::multiprecision::checked_int1024_t i1024sr;
	typedef boost::safe_numerics::safe<unsigned int> uintsr;
	typedef boost::safe_numerics::safe<uint8_t> u8sr;
	typedef boost::safe_numerics::safe<uint16_t> u16sr;
	typedef boost::safe_numerics::safe<uint32_t> u32sr;
	typedef boost::safe_numerics::safe<uint64_t> u64sr;
	typedef boost::multiprecision::checked_uint128_t u128sr;
	typedef boost::multiprecision::checked_uint256_t u256sr;
	typedef boost::multiprecision::checked_uint512_t u512sr;
	typedef boost::multiprecision::checked_uint1024_t u1024sr;
	
	// Wrapped Integer types
	typedef std::numeric_limits_wrapper<int> intw;
	typedef std::numeric_limits_wrapper<i8r> i8;
	typedef std::numeric_limits_wrapper<i16r> i16;
	typedef std::numeric_limits_wrapper<i32r> i32;
	typedef std::numeric_limits_wrapper<i64r> i64;
	typedef std::numeric_limits_wrapper<i128r> i128;
	typedef std::numeric_limits_wrapper<i256r> i256;
	typedef std::numeric_limits_wrapper<i512r> i512;
	typedef std::numeric_limits_wrapper<i1024r> i1024;
	typedef std::numeric_limits_wrapper<unsigned int> uintw;
	typedef std::numeric_limits_wrapper<u8r> u8;
	typedef std::numeric_limits_wrapper<u16r> u16;
	typedef std::numeric_limits_wrapper<u32r> u32;
	typedef std::numeric_limits_wrapper<u64r> u64;
	typedef std::numeric_limits_wrapper<u128r> u128;
	typedef std::numeric_limits_wrapper<u256r> u256;
	typedef std::numeric_limits_wrapper<u512r> u512;
	typedef std::numeric_limits_wrapper<u1024r> u1024;
	// Fast wrapped types
	typedef std::numeric_limits_wrapper<i8fr> i8f;
	typedef std::numeric_limits_wrapper<i16fr> i16f;
	typedef std::numeric_limits_wrapper<i32fr> i32f;
	typedef std::numeric_limits_wrapper<i64fr> i64f;
	typedef std::numeric_limits_wrapper<i128fr> i128f;
	typedef std::numeric_limits_wrapper<i256fr> i256f;
	typedef std::numeric_limits_wrapper<i512fr> i512f;
	typedef std::numeric_limits_wrapper<i1024fr> i1024f;
	typedef std::numeric_limits_wrapper<u8fr> u8f;
	typedef std::numeric_limits_wrapper<u16fr> u16f;
	typedef std::numeric_limits_wrapper<u32fr> u32f;
	typedef std::numeric_limits_wrapper<u64fr> u64f;
	typedef std::numeric_limits_wrapper<u128fr> u128f;
	typedef std::numeric_limits_wrapper<u256fr> u256f;
	typedef std::numeric_limits_wrapper<u512fr> u512f;
	typedef std::numeric_limits_wrapper<u1024fr> u1024f;
	// Safe wrapped types
	typedef std::numeric_limits_wrapper<intsr> ints;
	typedef ints int_safe;
	typedef std::numeric_limits_wrapper<i8sr> i8s;
	typedef std::numeric_limits_wrapper<i16sr> i16s;
	typedef std::numeric_limits_wrapper<i32sr> i32s;
	typedef std::numeric_limits_wrapper<i64sr> i64s;
	typedef std::numeric_limits_wrapper<i128sr> i128s;
	typedef std::numeric_limits_wrapper<i256sr> i256s;
	typedef std::numeric_limits_wrapper<i512sr> i512s;
	typedef std::numeric_limits_wrapper<i1024sr> i1024s;
	typedef std::numeric_limits_wrapper<uintsr> uints;
	typedef uints uint_safe;
	typedef std::numeric_limits_wrapper<u8sr> u8s;
	typedef std::numeric_limits_wrapper<u16sr> u16s;
	typedef std::numeric_limits_wrapper<u32sr> u32s;
	typedef std::numeric_limits_wrapper<u64sr> u64s;
	typedef std::numeric_limits_wrapper<u128sr> u128s;
	typedef std::numeric_limits_wrapper<u256sr> u256s;
	typedef std::numeric_limits_wrapper<u512sr> u512s;
	typedef std::numeric_limits_wrapper<u1024sr> u1024s;
	
	// Raw Float Type Defines
	typedef half_float::half half;
	typedef half f16r;
	typedef float f32r;
	typedef double f64r;
	typedef boost::multiprecision::cpp_bin_float_quad f128; // Note: not the same size or bitlayout as IEEE floating point quad
	typedef boost::multiprecision::cpp_bin_float_oct f256; // Note: not the same size or bitlayout as IEEE floating point oct
	// Wrapped float
	typedef std::numeric_limits_wrapper<half> halfw;
	typedef std::numeric_limits_wrapper<float> floatw;
	typedef std::numeric_limits_wrapper<double> doublew;
	typedef std::numeric_limits_wrapper<half> f16;
	typedef std::numeric_limits_wrapper<f32r> f32;
	typedef std::numeric_limits_wrapper<f64r> f64;
	// typedef std::numeric_limits_wrapper<f128> f128w;
	// typedef std::numeric_limits_wrapper<f256> f256w;
}

namespace std::rational {
	using boost::multiprecision::numerator;
	using boost::multiprecision::denominator;
}

namespace dl::literals {
// TODO: Extend extended literals to support decimal, binary, and octal in addition to hex
// #define DL_DEFINE_EXTENDED_LITERALS(Bits) \
// 	template <char... STR> \
// 	constexpr BOOST_JOIN(BOOST_JOIN(dl::builtin::i, Bits), r) operator"" BOOST_JOIN(BOOST_JOIN(i, Bits), r)() { \
// 		using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
// 		return boost::multiprecision::literals::detail::make_backend_from_pack< \
// 			pt, \
// 			boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, void> >::value; \
// 	} \
// 	template <char... STR> \
// 	constexpr BOOST_JOIN(BOOST_JOIN(dl::builtin::u, Bits), r) operator"" BOOST_JOIN(BOOST_JOIN(u, Bits), r)() { \
// 		using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
// 		return boost::multiprecision::literals::detail::make_backend_from_pack< \
// 			pt, \
// 			boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::unsigned_magnitude, boost::multiprecision::unchecked, void> >::value; \
// 	} \
// 	template <char... STR> \
// 	constexpr BOOST_JOIN(dl::builtin::i, Bits) operator"" BOOST_JOIN(i, Bits)() { \
// 		using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
// 		return boost::multiprecision::literals::detail::make_backend_from_pack< \
// 			pt, \
// 			boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, void> >::value; \
// 	} \
// 	template <char... STR> \
// 	constexpr BOOST_JOIN(dl::builtin::u, Bits) operator"" BOOST_JOIN(u, Bits)() { \
// 		using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
// 		return boost::multiprecision::literals::detail::make_backend_from_pack< \
// 			pt, \
// 			boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::unsigned_magnitude, boost::multiprecision::unchecked, void> >::value; \
// 	} \
	// template <char... STR> \
	// constexpr BOOST_JOIN(BOOST_JOIN(dl::builtin::i, Bits), fr) operator"" BOOST_JOIN(BOOST_JOIN(i, Bits), fr)() { \
	// 	using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
	// 	return boost::multiprecision::literals::detail::make_backend_from_pack< \
	// 		pt, \
	// 		boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, void> >::value; \
	// } \
	// template <char... STR> \
	// constexpr BOOST_JOIN(BOOST_JOIN(dl::builtin::u, Bits), fr) operator"" BOOST_JOIN(BOOST_JOIN(u, Bits), fr)() { \
	// 	using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
	// 	return boost::multiprecision::literals::detail::make_backend_from_pack< \
	// 		pt, \
	// 		boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::unsigned_magnitude, boost::multiprecision::unchecked, void> >::value; \
	// } \
	// template <char... STR> \
	// constexpr BOOST_JOIN(BOOST_JOIN(dl::builtin::i, Bits), f) operator"" BOOST_JOIN(BOOST_JOIN(i, Bits), f)() { \
	// 	using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
	// 	return boost::multiprecision::literals::detail::make_backend_from_pack< \
	// 		pt, \
	// 		boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, void> >::value; \
	// } \
	// template <char... STR> \
	// constexpr BOOST_JOIN(BOOST_JOIN(dl::builtin::u, Bits), f) operator"" BOOST_JOIN(BOOST_JOIN(u, Bits), f)() { \
	// 	using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
	// 	return boost::multiprecision::literals::detail::make_backend_from_pack< \
	// 		pt, \
	// 		boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::unsigned_magnitude, boost::multiprecision::unchecked, void> >::value; \
	// } \
	// template <char... STR> \
	// constexpr BOOST_JOIN(BOOST_JOIN(dl::builtin::i, Bits), sr) operator"" BOOST_JOIN(BOOST_JOIN(i, Bits), sr)() { \
	// 	using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
	// 	return boost::multiprecision::literals::detail::make_backend_from_pack< \
	// 		pt, \
	// 		boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::signed_magnitude, boost::multiprecision::checked, void> >::value; \
	// } \
	// template <char... STR> \
	// constexpr BOOST_JOIN(BOOST_JOIN(dl::builtin::u, Bits), sr) operator"" BOOST_JOIN(BOOST_JOIN(u, Bits), sr)() { \
	// 	using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
	// 	return boost::multiprecision::literals::detail::make_backend_from_pack< \
	// 		pt, \
	// 		boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::unsigned_magnitude, boost::multiprecision::checked, void> >::value; \
	// } \
	// template <char... STR> \
	// constexpr BOOST_JOIN(BOOST_JOIN(dl::builtin::i, Bits), s) operator"" BOOST_JOIN(BOOST_JOIN(i, Bits), s)() { \
	// 	using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
	// 	return boost::multiprecision::literals::detail::make_backend_from_pack< \
	// 		pt, \
	// 		boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::signed_magnitude, boost::multiprecision::checked, void> >::value; \
	// } \
	// template <char... STR> \
	// constexpr BOOST_JOIN(BOOST_JOIN(dl::builtin::u, Bits), s) operator"" BOOST_JOIN(BOOST_JOIN(u, Bits), s)() { \
	// 	using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
	// 	return boost::multiprecision::literals::detail::make_backend_from_pack< \
	// 		pt, \
	// 		boost::multiprecision::backends::cpp_int_backend<Bits, Bits, boost::multiprecision::unsigned_magnitude, boost::multiprecision::checked, void> >::value; \
	// }	


	// Numeric literals
	constexpr dl::builtin::i8     operator"" i8    (unsigned long long x) { return x; }
	constexpr dl::builtin::i16    operator"" i16   (unsigned long long x) { return x; }
	constexpr dl::builtin::i32    operator"" i32   (unsigned long long x) { return x; }
	constexpr dl::builtin::i64    operator"" i64   (unsigned long long x) { return x; }
	constexpr dl::builtin::u8     operator"" u8    (unsigned long long x) { return x; }
	constexpr dl::builtin::u16    operator"" u16   (unsigned long long x) { return x; }
	constexpr dl::builtin::u32    operator"" u32   (unsigned long long x) { return x; }
	constexpr dl::builtin::u64    operator"" u64   (unsigned long long x) { return x; }
	constexpr dl::builtin::i8f    operator"" i8f   (unsigned long long x) { return x; }
	constexpr dl::builtin::i16f   operator"" i16f  (unsigned long long x) { return x; }
	constexpr dl::builtin::i32f   operator"" i32f  (unsigned long long x) { return x; }
	constexpr dl::builtin::i64f   operator"" i64f  (unsigned long long x) { return x; }
	constexpr dl::builtin::u8f    operator"" u8f   (unsigned long long x) { return x; }
	constexpr dl::builtin::u16f   operator"" u16f  (unsigned long long x) { return x; }
	constexpr dl::builtin::u32f   operator"" u32f  (unsigned long long x) { return x; }
	constexpr dl::builtin::u64f   operator"" u64f  (unsigned long long x) { return x; }
	constexpr dl::builtin::i8s    operator"" i8s   (unsigned long long x) { return x; }
	constexpr dl::builtin::i16s   operator"" i16s  (unsigned long long x) { return x; }
	constexpr dl::builtin::i32s   operator"" i32s  (unsigned long long x) { return x; }
	constexpr dl::builtin::i64s   operator"" i64s  (unsigned long long x) { return x; }
	constexpr dl::builtin::u8s    operator"" u8s   (unsigned long long x) { return x; }
	constexpr dl::builtin::u16s   operator"" u16s  (unsigned long long x) { return x; }
	constexpr dl::builtin::u32s   operator"" u32s  (unsigned long long x) { return x; }
	constexpr dl::builtin::u64s   operator"" u64s  (unsigned long long x) { return x; }
	// Raw Numeric literals
	constexpr dl::builtin::i8r     operator"" i8r    (unsigned long long x) { return x; }
	constexpr dl::builtin::i16r    operator"" i16r   (unsigned long long x) { return x; }
	constexpr dl::builtin::i32r    operator"" i32r   (unsigned long long x) { return x; }
	constexpr dl::builtin::i64r    operator"" i64r   (unsigned long long x) { return x; }
	constexpr dl::builtin::u8r     operator"" u8r    (unsigned long long x) { return x; }
	constexpr dl::builtin::u16r    operator"" u16r   (unsigned long long x) { return x; }
	constexpr dl::builtin::u32r    operator"" u32r   (unsigned long long x) { return x; }
	constexpr dl::builtin::u64r    operator"" u64r   (unsigned long long x) { return x; }
	constexpr dl::builtin::i8fr    operator"" i8fr   (unsigned long long x) { return x; }
	constexpr dl::builtin::i16fr   operator"" i16fr  (unsigned long long x) { return x; }
	constexpr dl::builtin::i32fr   operator"" i32fr  (unsigned long long x) { return x; }
	constexpr dl::builtin::i64fr   operator"" i64fr  (unsigned long long x) { return x; }
	constexpr dl::builtin::u8fr    operator"" u8fr   (unsigned long long x) { return x; }
	constexpr dl::builtin::u16fr   operator"" u16fr  (unsigned long long x) { return x; }
	constexpr dl::builtin::u32fr   operator"" u32fr  (unsigned long long x) { return x; }
	constexpr dl::builtin::u64fr   operator"" u64fr  (unsigned long long x) { return x; }
	constexpr dl::builtin::i8sr    operator"" i8sr   (unsigned long long x) { return x; }
	constexpr dl::builtin::i16sr   operator"" i16sr  (unsigned long long x) { return x; }
	constexpr dl::builtin::i32sr   operator"" i32sr  (unsigned long long x) { return x; }
	constexpr dl::builtin::i64sr   operator"" i64sr  (unsigned long long x) { return x; }
	constexpr dl::builtin::u8sr    operator"" u8sr   (unsigned long long x) { return x; }
	constexpr dl::builtin::u16sr   operator"" u16sr  (unsigned long long x) { return x; }
	constexpr dl::builtin::u32sr   operator"" u32sr  (unsigned long long x) { return x; }
	constexpr dl::builtin::u64sr   operator"" u64sr  (unsigned long long x) { return x; }
	inline dl::builtin::rational operator""r (unsigned long long x) { return x; } // TODO: not working
	// Define literals for larger extended literal types
	// DL_DEFINE_EXTENDED_LITERALS(128)
	// DL_DEFINE_EXTENDED_LITERALS(256)
	// DL_DEFINE_EXTENDED_LITERALS(512)
	// DL_DEFINE_EXTENDED_LITERALS(1024)

	// Float literals
	inline dl::builtin::f16 operator"" f16 (long double x) { return dl::builtin::f16(x); }
	constexpr dl::builtin::f32 operator"" f32 (long double x) { return x; }
	constexpr dl::builtin::f64 operator"" f64 (long double x) { return x; }
	inline dl::builtin::f128 operator"" f128(long double x) { return x; }
	inline dl::builtin::f256 operator"" f256(long double x) { return x; }
	// Raw Float literals
	inline dl::builtin::f16r operator"" f16r (long double x) { return dl::builtin::f16r(x); }
	constexpr dl::builtin::f32r operator"" f32r (long double x) { return x; }
	constexpr dl::builtin::f64r operator"" f64r (long double x) { return x; }
	// dl::builtin::f128r operator"" f128r(long double x) { return x; }
	// dl::builtin::f256r operator"" f256r(long double x) { return x; }
}

#endif // ___DUCKED_C_NUMBER_HPP___